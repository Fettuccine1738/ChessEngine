/**
     * @param board current position
     * @param moves list of integers encoding move info
     * @param sideToPlay side to play
     */
    public static void generatePseudoPawnMoves(Board board, List<Integer> moves, boolean sideToPlay) {
        int[] piecelist = (sideToPlay) ? board.getWhitePieceList() : board.getBlackPieceList();
        int start = getPieceListFloor((sideToPlay) ? WHITE_PAWN : BLACK_PAWN);
        int end = getPieceListSize((sideToPlay) ? WHITE_PAWN : BLACK_PAWN);
        int currentSq;
        int ep = board.getEnPassant();
        int skip = EMPTY.getValue();

        for (; start <= end; start++) {
            if (piecelist[start] == skip) continue; // skip if there is no piece in index
            currentSq = piecelist[start] & 0xff; // get current square
            assert(board.getPieceOnBoard(currentSq) != EMPTY);

            // generate quiet pawn push until the seventh rank
            if (sideToPlay == WHITE) {
                int to = getMailbox120Number(getMailbox64Number(currentSq) + SINGLE_PUSH);
                // if we are not off board or on the seventh rank(promotion)
                if (to != OFF_BOARD && !isOnSeventhRank((byte) currentSq)) {
                    PieceType pieceOnBoard = board.getPieceOnBoard(to);
                    if (pieceOnBoard == EMPTY) {
                        moves.add(Move.encodeMove(currentSq, to, 0, 0, Move.FLAG_QUIET));
                        // if on second rank add a double push
                        if (isOnSecondRank((byte) currentSq)) {
                            to = getMailbox120Number(getMailbox64Number(currentSq) + DOUBLE_PUSH);
                            pieceOnBoard = board.getPieceOnBoard(to);
                            if (pieceOnBoard == EMPTY) {
                                moves.add(Move.encodeMove(currentSq, to, 0, 0, Move.FLAG_DOUBLE_PAWN_PUSH));
                            }
                        }
                    }
                }
            }
            else {
                int to = getMailbox120Number(getMailbox64Number(currentSq) - SINGLE_PUSH);
                // if we are not off board or on the seventh rank(promotion)
                if (to != OFF_BOARD && !isOnSecondRank((byte) currentSq)) {
                    PieceType piece = board.getPieceOnBoard(to);
                    if (piece == EMPTY) {
                        moves.add(Move.encodeMove(currentSq, to, 0, 0, Move.FLAG_QUIET));
                        // if on seventh rank add a double push
                        if (isOnSeventhRank((byte) currentSq)) {
                            to = getMailbox120Number(getMailbox64Number(currentSq) - DOUBLE_PUSH);
                            piece = board.getPieceOnBoard(to);
                            if (piece == EMPTY) {
                                moves.add(Move.encodeMove(currentSq, to, 0, 0, Move.FLAG_DOUBLE_PAWN_PUSH));
                            }
                        }
                    }
                }
            }
           // generate non promotion captures
            if (sideToPlay == WHITE) {
                // capture left
                int cap = getMailbox120Number(getMailbox64Number(currentSq) + LEFTCAP);
                if (cap != OFF_BOARD && !isOnSeventhRank((byte) currentSq)) {
                    PieceType piece = board.getPieceOnBoard(cap);
                    if (piece.isBlack()) {
                        moves.add(Move.encodeMove(currentSq, cap, piece.getValue(), 0, Move.FLAG_CAPTURE));
                    }
                }
                if (ep != OFF_BOARD && cap == ep) { // generate enPasant
                    PieceType p = board.getPieceOnBoard(cap - SINGLE_PUSH64);
                    moves.add(Move.encodeMove(currentSq, cap, p.getValue(), 0, Move.FLAG_EN_PASSANT));
                }
                cap = getMailbox120Number(getMailbox64Number(currentSq) + RIGHTCAP);
                if (cap != OFF_BOARD && !isOnSeventhRank((byte) currentSq)) {
                    PieceType piece = board.getPieceOnBoard(cap);
                    if (piece.isBlack()) {
                        moves.add(Move.encodeMove(currentSq, cap, piece.getValue(), 0, Move.FLAG_CAPTURE));
                    }
                }
                if (ep != OFF_BOARD && cap == ep) { // generate enPassant
                    PieceType p = board.getPieceOnBoard(cap - SINGLE_PUSH64);
                    moves.add(Move.encodeMove(currentSq, ep, p.getValue(), 0, Move.FLAG_EN_PASSANT));
                }
            }
            else {
                // capture left
                int cap = getMailbox120Number(getMailbox64Number(currentSq) - LEFTCAP);
                if (cap != OFF_BOARD && !isOnSecondRank((byte) currentSq)) {
                    PieceType piece = board.getPieceOnBoard(cap);
                    if (piece.isWhite()) {
                        moves.add(Move.encodeMove(currentSq, cap, piece.getValue(), 0, Move.FLAG_CAPTURE));
                    }
                }
                if (ep != OFF_BOARD && cap == ep) {
                    PieceType p = board.getPieceOnBoard(cap + SINGLE_PUSH64);
                    assert(p.getValue() == WHITE_PAWN.getValue());
                    moves.add(Move.encodeMove(currentSq, cap, p.getValue(), 0, Move.FLAG_EN_PASSANT));
                }
                cap = getMailbox120Number(getMailbox64Number(currentSq) - RIGHTCAP);
                if (cap != OFF_BOARD && !isOnSecondRank((byte) currentSq)) {
                    PieceType piece = board.getPieceOnBoard(cap);
                    if (piece.isWhite()) {
                        moves.add(Move.encodeMove(currentSq, cap, piece.getValue(), 0, Move.FLAG_CAPTURE));
                    }
                }
                if (ep != OFF_BOARD && cap == ep) { // capture enpassant
                    PieceType p = board.getPieceOnBoard(cap + SINGLE_PUSH64);
                    assert(p.getValue() == WHITE_PAWN.getValue());
                    moves.add(Move.encodeMove(currentSq, cap, p.getValue(), 0, Move.FLAG_EN_PASSANT));
                }
            }
            // generate promotion - capture moves : moves that capture into promotion
            if (sideToPlay == WHITE && isOnSeventhRank((byte) currentSq)) {
                int leftCapture = getMailbox120Number(getMailbox64Number(currentSq) + LEFTCAP);
                int rightCapture = getMailbox120Number(getMailbox64Number(currentSq) + RIGHTCAP);
                int push = getMailbox120Number(getMailbox64Number(currentSq) + SINGLE_PUSH);
                assert(leftCapture != OFF_BOARD);
                assert(rightCapture != OFF_BOARD);
                assert(push != OFF_BOARD);
                if (leftCapture != OFF_BOARD) {
                    PieceType piece = board.getPieceOnBoard(leftCapture);
                    if (piece.isBlack()) { // add promotion to all major piece
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                WHITE_KNIGHT.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                WHITE_BISHOP.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                WHITE_ROOK.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                WHITE_QUEEN.getValue(), Move.FLAG_PROMOTION));
                    }
                }
                if (rightCapture != OFF_BOARD) {
                    PieceType piece = board.getPieceOnBoard(rightCapture);
                    if (piece.isBlack()) { // add promotion to all major piece
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                WHITE_KNIGHT.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                WHITE_BISHOP.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                WHITE_ROOK.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                WHITE_QUEEN.getValue(), Move.FLAG_PROMOTION));
                    }
                }
                if (push != OFF_BOARD) {
                    PieceType piece = board.getPieceOnBoard(rightCapture);
                    if (piece == EMPTY) { // add promotion to all major piece
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                WHITE_KNIGHT.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                WHITE_BISHOP.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                WHITE_ROOK.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                WHITE_QUEEN.getValue(), Move.FLAG_PROMOTION));
                    }
                }
            }
            // black promotion
            if (sideToPlay == BLACK &&  isOnSecondRank((byte) currentSq)) {
                int leftCapture = getMailbox120Number(getMailbox64Number(currentSq) - LEFTCAP);
                int rightCapture = getMailbox120Number(getMailbox64Number(currentSq) - RIGHTCAP);
                int push = getMailbox120Number(getMailbox64Number(currentSq) - SINGLE_PUSH);
                assert(leftCapture != OFF_BOARD);
                assert(rightCapture != OFF_BOARD);
                assert(push != OFF_BOARD);
                if (leftCapture != OFF_BOARD) {
                    PieceType piece = board.getPieceOnBoard(leftCapture);
                    if (piece.isWhite()) { // add promotion to all major piece
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                BLACK_KNIGHT.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                BLACK_BISHOP.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                BLACK_ROOK.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, leftCapture, piece.getValue(),
                                BLACK_QUEEN.getValue(), Move.FLAG_PROMOTION));
                    }
                }
                if (rightCapture != OFF_BOARD) {
                    PieceType piece = board.getPieceOnBoard(rightCapture);
                    if (piece.isWhite()) { // add promotion to all major piece
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                BLACK_KNIGHT.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                BLACK_BISHOP.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                BLACK_ROOK.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, rightCapture, piece.getValue(),
                                BLACK_QUEEN.getValue(), Move.FLAG_PROMOTION));
                    }
                }
                if (push != OFF_BOARD) {
                    PieceType piece = board.getPieceOnBoard(push);
                    if (piece == EMPTY) { // add promotion to all major piece
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                BLACK_KNIGHT.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                BLACK_BISHOP.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                BLACK_ROOK.getValue(), Move.FLAG_PROMOTION));
                        moves.add(Move.encodeMove(currentSq, push, 0,
                                BLACK_QUEEN.getValue(), Move.FLAG_PROMOTION));
                    }
                }
            }
        }
    }